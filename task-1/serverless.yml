service: serverless-task-1
custom:
  usersTableName: 'Users'
  bucket: 'aishchenko-test'
  QueueName: "userFiles"

provider:
  name: aws
  runtime: java8
  region: us-east-1
  timeout: 10
  memorySize: 1024
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "s3:GetObject"
        - "sqs:SendMessage"
      Resource: "*"
  environment:
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    SQS_QUEUE_URL: !Ref myQueue

package:
  artifact: target/task1-dev.jar

functions:
  fetch:
    handler: com.serverless.handlers.rest.ListUserHandler
    events:
      - http:
          method: GET
          path: /users

  fetchById:
    handler: com.serverless.handlers.rest.GetUserHandler
    events:
      - http:
          method: GET
          path: /users/{id}

  add:
    handler: com.serverless.handlers.rest.CreateUserHandler
    events:
      - http:
          method: POST
          path: /users

  delete:
    handler: com.serverless.handlers.rest.DeleteUserHandler
    events:
      - http:
          method: DELETE
          path: /users/{id}

  s3EventHandler:
    handler: com.serverless.handlers.s3.S3EventHandler
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*

resources:
  Resources:
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    myQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.QueueName}
